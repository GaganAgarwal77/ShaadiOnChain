{"version":3,"sources":["app/LoveLetters.js","app/services/utility.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["i","LoveLetters","push","useHistory","useState","letterPrice","setLetterPrice","myLetters","setMyLetters","rcvdLetters","setRcvdLetters","useEffect","fetchPrice","getLoveLetterPrice","price","web3","utils","fromWei","fetchMyLetters","loadAccount","account","getLoveLettersForUser","tokenIds","letters","length","getLoveLetterById","letter","tokenId","forEach","getLoveLetterImageFromTokenId","image","creator","arr","purchase","purchaseLoveLetter","window","alert","location","reload","className","onClick","src","alt","width","height","map","style","margin","cursor","getURI","tokenURI","uri","slice","substring","uriToImageConverter","getImageFromTokenId","axios","result","data","getMetadataFromTokenId","tokenURILoveLetter","cid","getMarriageCertURI","marriageCertificateTokenURI","getImageFromMarriageCertTokenId","getTreeImageFromTokenId","tokenURITree","getImageFromCID","dataURItoBlob","dataURI","byteString","atob","split","ab","ArrayBuffer","ia","Uint8Array","charCodeAt","Blob","type","getGeneralContractURI","tokenUri","getMetadataFromGeneralContractTokenUri","tokenUriCID","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/21.89d60f65.chunk.js","sourcesContent":["import React , { useState, useEffect } from 'react'\nimport  '../assets/Market.css'\nimport  '../assets/Purchase.css'\nimport { useHistory } from 'react-router-dom'\nimport { web3, loadAccount, getLoveLetterPrice, purchaseLoveLetter, \n    getLoveLettersForUser, getLoveLetterById } from \"./services/web3\";\nimport { getLoveLetterImageFromTokenId } from \"./services/utility\";\n\nfunction LoveLetters() {\n    const { push } = useHistory()\n\n    const [letterPrice, setLetterPrice] = useState('');\n    const [myLetters, setMyLetters] = useState([]);\n    const [rcvdLetters, setRcvdLetters] = useState([]);\n\n    useEffect(() => {\n\n        const fetchPrice = async () => {\n            const price = await getLoveLetterPrice();\n            setLetterPrice(web3.utils.fromWei(price));\n        }\n\n        const fetchMyLetters = async () => {\n            const account = await loadAccount();\n            const tokenIds = await getLoveLettersForUser();\n\n            let letters = []\n            for(var i = 0; i < tokenIds.length; i++) {\n                var letter = await getLoveLetterById(tokenIds[i]);\n                letter.tokenId = tokenIds[i];\n                letters.push(letter);\n            }\n          \n            letters.forEach(async letter => {\n                const image = await getLoveLetterImageFromTokenId(letter.tokenId);\n                letter.image = image;\n                if(letter.creator === account) {\n                    setMyLetters((arr) => [...arr, letter]);\n                }\n                else {\n                    setRcvdLetters((arr) => [...arr, letter]);\n                }\n            })\n        };\n\n        fetchPrice();\n        fetchMyLetters();\n    }, []);\n\n    const purchase = async () => {\n        const status = await purchaseLoveLetter();\n        if(status) {\n            window.alert(\"Purchase is successfully completed!\");\n            window.location.reload();\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"purchase__detailsBuy\">\n                <button onClick={purchase}>\n                Purchase Love Letter NFT for {letterPrice} <img src=\"/assets/images/ethereum3.svg\" alt=\"ETH\" width=\"30\" height=\"30\" className='symbol' />\n                </button>\n            </div>\n        <h2 className='mt-3'>Your Love Letters</h2>\n        <div className='market'> \n                {myLetters.map((letter) => (\n                     <div className=\"card\" style={{width:\"20vw\",margin:\"10px\",cursor:\"pointer\"}} onClick={() => push('/love-letter/' + letter.tokenId)}>\n                        <div className=\"card-body\">\n                            <div className=\"item\">\n                                <img style={{width:\"100%\"}} src={letter.image} alt=\"letter\" />\n                            </div>\n                        </div>\n                    </div>\n                ))\n                }\n        </div>\n        <h2 className='mt-3'>Recieved Love Letters</h2>\n        <div className='market'> \n                {rcvdLetters.map((letter) => (\n                     <div className=\"card\" style={{width:\"20vw\",margin:\"10px\",cursor:\"pointer\"}} onClick={() => push('/read-love-letter/' + letter.tokenId)}>\n                        <div className=\"card-body\">\n                            <div className=\"item\">\n                                <img style={{width:\"100%\"}} src={letter.image} alt=\"letter\" />\n                            </div>\n                        </div>\n                    </div>\n                ))\n                }\n        </div>\n        </div>\n    )\n}\n\nexport default LoveLetters;","import { tokenURI, tokenURILoveLetter, marriageCertificateTokenURI, tokenURITree } from \"./web3\";\nimport axios from 'axios';\n\nexport const getURI = async (tokenId) => {\n    var uri = await tokenURI(tokenId);\n    uri = uri.slice(7); \n    uri = uri.substring(0, uri.length - 14);\n    uri = 'https://' + uri + '.ipfs.dweb.link/metadata.json';\n    return uri\n}  \n\nexport const uriToImageConverter = (uri) => {\n    var image = uri.slice(7); \n    image = image.substring(0, image.length - 5);\n    image = 'https://' + image + '.ipfs.dweb.link/blob';\n    return image;\n}\n\nexport const getImageFromTokenId = async (tokenId) => {\n    const uri = await getURI(tokenId);\n    const result = await axios(uri);\n    const image = uriToImageConverter(result.data.image);\n    return image;\n}\n\nexport const getMetadataFromTokenId = async (tokenId) => {\n    const uri = await getURI(tokenId);\n    const result = await axios(uri);\n    return result.data;\n}\n\nexport const getLoveLetterImageFromTokenId = async (tokenId) => {\n    var cid = await tokenURILoveLetter(tokenId);\n    const image = 'https://' + cid + '.ipfs.dweb.link';\n    return image;\n}\n\nexport const getMarriageCertURI = async (tokenId) => {\n    var uri = await marriageCertificateTokenURI(tokenId);\n    uri = uri.slice(7); \n    uri = uri.substring(0, uri.length - 14);\n    uri = 'https://' + uri + '.ipfs.dweb.link/metadata.json';\n    return uri\n}  \n\nexport const getImageFromMarriageCertTokenId = async (tokenId) => {\n    const uri = await getMarriageCertURI(tokenId);\n    const result = await axios(uri);\n    const image = uriToImageConverter(result.data.image);\n    return image;\n}\n\nexport const getTreeImageFromTokenId = async (tokenId) => {\n    const cid = await tokenURITree(tokenId);\n    const image = getImageFromCID(cid);\n    return image;\n}\n\nexport const dataURItoBlob = (dataURI) => {\n    var byteString = atob(dataURI.split(',')[1]);\n    var ab = new ArrayBuffer(byteString.length);\n    var ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n    }\n    var bb = new Blob([ab], {type:'image/*'});\n    return bb;\n}\n\nexport const getGeneralContractURI = async (tokenUri) => {\n    var uri = tokenUri;\n    uri = uri.slice(7); \n    uri = uri.substring(0, uri.length - 14);\n    uri = 'https://' + uri + '.ipfs.dweb.link/metadata.json';\n    return uri\n  }  \n    \nexport const getMetadataFromGeneralContractTokenUri = async (tokenUri) => {\n    const uri = await getGeneralContractURI(tokenUri);\n    const result = await axios(uri);\n    return result.data;\n}\n  \nexport const getImageFromCID = (tokenUriCID) => {\n    return 'https://' + tokenUriCID + '.ipfs.dweb.link';\n}  ","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}