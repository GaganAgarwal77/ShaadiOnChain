{"version":3,"sources":["app/CreateRing.js"],"names":["i","require","config","CreateRing","wallet","isLoggedIn","goBack","useHistory","dataURItoBlob","dataURI","byteString","atob","split","ab","ArrayBuffer","length","ia","Uint8Array","charCodeAt","Blob","type","useState","name","setName","description","setDescription","dataUri","setDataUri","price","setPrice","ringType","setRingType","isLoadingMint","setIsLoadingMint","isLoadingSell","setIsLoadingSell","tokenId","setTokenId","onChange","file","Promise","resolve","reject","reader","FileReader","onload","event","target","result","readAsDataURL","fileToDataUri","then","handleMintNFT","e","preventDefault","image","client","NFTStorage","token","process","nft","store","metadata","window","alert","storageUrl","url","mintRingNFT","retTokenId","console","log","handleSellNFT","ringTypeNum","sellRingOnMarketplace","web3","utils","toWei","location","href","className","style","width","src","onClick","alt","onSubmit","required","value","files","min","step"],"mappings":"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","file":"static/js/29.54453f0c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport '../assets/CreateRing.css'\n\nimport { NFTStorage } from 'nft.storage'\n\nimport { useHistory } from 'react-router-dom'\nimport { web3, mintRingNFT, sellRingOnMarketplace } from \"./services/web3\";\n\nrequire('dotenv').config()\n\nfunction CreateRing({wallet, isLoggedIn}) {      \n\n  const { goBack } = useHistory()\n\n  const dataURItoBlob = (dataURI) => {\n    var byteString = atob(dataURI.split(',')[1]);\n    var ab = new ArrayBuffer(byteString.length);\n    var ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n    }\n    var bb = new Blob([ab], {type:'image/*'});\n    return bb;\n  }\n\n  const fileToDataUri = (file) => new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        resolve(event.target.result)\n      };\n      reader.readAsDataURL(file);\n  })\n    \n\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n    const [dataUri, setDataUri] = useState('');\n    const [price, setPrice] = useState('0');\n    const [ringType, setRingType] = useState('Male');\n    const [isLoadingMint, setIsLoadingMint] = useState(false);\n    const [isLoadingSell, setIsLoadingSell] = useState(false);\n    const [tokenId, setTokenId] = useState('0');\n\n    const onChange = (file) => {\n    \n      if(!file) {\n        setDataUri('');\n        return;\n      }\n  \n      fileToDataUri(file)\n        .then(dataUri => {\n          setDataUri(dataUri)\n        })\n      \n    }\n    \n\n    const handleMintNFT = async (e) =>  {\n      try{\n        setIsLoadingMint(true);\n        e.preventDefault();\n        \n        var image = dataURItoBlob(dataUri);\n        const client = new NFTStorage({ token: process.env.REACT_APP_NFT_STORAGE })\n        const nft = { name, description, image, ringType:ringType };\n        const metadata = await client.store(nft);\n        window.alert(\"Successfully stored on IPFS\");\n\n        var storageUrl = metadata.url;\n        // var storageUrl = \"hello\";\n        const retTokenId = await mintRingNFT(storageUrl);\n        setTokenId(retTokenId);\n        setIsLoadingMint(false);\n        window.alert('Minted ring successfully!');\n      }\n      catch (e) {\n        console.log(e);\n        window.alert('an error has occured, try again!');\n        setIsLoadingMint(false);\n      }\n    }\n\n    const handleSellNFT = async (e) =>  {\n      try{\n        setIsLoadingSell(true);\n        e.preventDefault();\n        \n        let ringTypeNum;\n        if(ringType === 'Male') ringTypeNum = 0;\n        else if(ringType === 'Female') ringTypeNum = 1;\n\n        await sellRingOnMarketplace(\n          tokenId, \n          web3.utils.toWei(price), \n          ringTypeNum\n        );\n\n        setIsLoadingSell(false);\n        window.location.href =\"/#/rings-marketplace\"\n      }\n      catch (e) {\n        console.log(e);\n        window.alert('an error has occured, try again!');\n        setIsLoadingSell(false);\n      }\n    }\n\n    return (\n        <div className=\"create\">\n            <div className=\"goback\">\n              <img style={{width:\"48px\"}} src=\"/ShaadiOnChain/assets/images/wedding-img/icon/left-arrow3.png\" onClick={goBack} alt=\"Go back\" className='gobackButton'/>   \n            </div>\n            <div className='poweredBy'>\n                  <h3>Powered by NFT.Storage </h3>   \n            </div>\n            <div className=\"create__artwork\">\n              <img src={dataUri===''? 'https://thumbs.gfycat.com/EqualPowerfulKoodoo-size_restricted.gif': dataUri} alt=\"upload artwork\"/>     \n            </div>\n\n            <div className=\"create__details\">\n              <h1>Mint a new Ring ðŸ–Œ </h1>\n              <form onSubmit={handleMintNFT}>\n                  <label>Name</label>\n                  <input \n                  type=\"text\" \n                  required \n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                  />\n\n                  <label>Description</label>\n                  <textarea\n                  required\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  ></textarea>\n\n                  <label>Image/GIF Upload</label>\n                  <input type=\"file\" onChange={(event) => onChange(event.target.files[0] || null)} />\n\n                  <label>Type of ring</label>\n                  <select\n                  value={ringType}\n                  onChange={(e) => setRingType(e.target.value)}\n                  >\n                  <option value=\"Male\">Male</option>\n                  <option value=\"Female\">Female</option>\n                  </select>\n\n                  <div className=\"create__submitButton\">\n                    <button>Mint NFT </button> {isLoadingMint &&  \" LOADING \"}\n                  </div>\n              </form>\n                \n              <form onSubmit={handleSellNFT}>\n                  <label>Price in ETH</label>\n                  <input \n                    required\n                    type=\"number\" \n                    min=\"0.01\"\n                    step=\"0.01\" \n                    value={price}\n                    onChange={(e) => setPrice(e.target.value)}\n                  />\n\n                  <div className=\"create__submitButton\">\n                    <button>Sell ring </button> {isLoadingSell &&  \" LOADING \"}\n                  </div>\n              </form>\n            </div>\n        </div>\n    )\n}\n\nexport default CreateRing\n"],"sourceRoot":""}