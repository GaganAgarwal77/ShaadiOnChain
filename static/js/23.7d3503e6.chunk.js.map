{"version":3,"sources":["app/card.js","app/RingsMarketplace.js","app/services/utility.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["i","Card","itemId","name","tokenId","description","image","creator","price","owner","type","push","useHistory","useState","creatorName","setCreatorName","imageUri","setImageUri","useEffect","getUser","user","fetchCreator","uri","uriToImageConverter","className","onClick","src","alt","length","substring","width","height","Market","rings","setRings","saleRingNFTs","forEach","nft","getMetadataFromTokenId","newNFT","arr","fetchNFTs","map","ring","key","web3","utils","fromWei","ringType","getURI","tokenURI","slice","getImageFromTokenId","axios","result","data","getLoveLetterImageFromTokenId","tokenURILoveLetter","cid","getMarriageCertURI","marriageCertificateTokenURI","getImageFromMarriageCertTokenId","getTreeImageFromTokenId","tokenURITree","getImageFromCID","dataURItoBlob","dataURI","byteString","atob","split","ab","ArrayBuffer","ia","Uint8Array","charCodeAt","Blob","getGeneralContractURI","tokenUri","getMetadataFromGeneralContractTokenUri","tokenUriCID","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/23.7d3503e6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport '../assets/Card.css'\nimport { useHistory } from 'react-router-dom'\nimport { getUser } from './services/web3';\nimport { uriToImageConverter } from \"./services/utility\";\n\n\nfunction Card({itemId, tokenId, name, description, image, creator, owner, price, type}) {\n    const { push } = useHistory()\n\n    const [creatorName, setCreatorName] = useState('');\n    const [imageUri, setImageUri] = useState('');\n\n    useEffect(() => {\n        const fetchCreator = async () => {\n            const user = await getUser(creator);\n            setCreatorName(user.name);\n        }\n\n        fetchCreator();\n        const uri = uriToImageConverter(image);\n        setImageUri(uri);\n    }, []);\n\n    return (\n        <div className='newcard' onClick={() => push('/purchase/' + itemId)}>\n            <img src={imageUri} alt=\"Ring NFT\" />\n            {/* <img src='/assets/images/wedding-img/ring-image.jpg' alt=\"nft artwork\" /> */}\n            <div className=\"newcard__info\">\n                <h2>{name}</h2>\n                <h4>{description.length >= 100 ? description.substring(0, 100) + '...' : description}</h4>\n                <h4>Creator: {creatorName}</h4>\n            </div>\n            <div className='newcard__infoValueParent'>\n                <div className=\"newcard__infoValue\">\n                        <h4 >{type} Ring</h4>\n                        <h3>{price}</h3>\n                        <img src=\"/assets/images/ethereum3.svg\" alt=\"ETH\" width=\"30\" height=\"30\" className='symbol' />\n                </div>\n            </div>\n        </div>\n\n\n\n\n\n        \n    )\n}\n\nexport default Card\n","import React, { useEffect, useState } from 'react'\nimport Card from './card'\nimport  '../assets/Market.css'\n\nimport { web3, saleRingNFTs } from \"./services/web3\";\nimport { getMetadataFromTokenId } from \"./services/utility\";\n\nfunction Market() {\n    const [rings, setRings] = useState([]);\n\n    useEffect(() => {\n        const fetchNFTs = async () => {\n            const ringNFTArray = await saleRingNFTs();\n            ringNFTArray.forEach(async nft => {\n                var newNFT = await getMetadataFromTokenId(nft.tokenId);\n                newNFT.itemId = nft.itemId;\n                newNFT.tokenId = nft.tokenId;\n                newNFT.creator = nft.creator;\n                newNFT.owner = nft.owner;\n                newNFT.price = nft.price;\n                setRings((arr) => [...arr, newNFT]);\n              }\n            );\n        };\n        fetchNFTs();\n    }, []);\n\n\n    return (\n        <div className='market'> \n            {rings.map((ring) => (\n                <Card\n                key={ring.itemId}\n                itemId={ring.itemId}\n                tokenId={ring.tokenId}\n                name={ring.name}\n                description={ring.description}\n                image={ring.image}\n                creator={ring.creator}\n                owner={ring.owner}\n                price={web3.utils.fromWei(ring.price)}\n                type={ring.ringType}\n                />\n            ))\n            }\n        </div>\n    )\n}\n\nexport default Market\n","import { tokenURI, tokenURILoveLetter, marriageCertificateTokenURI, tokenURITree } from \"./web3\";\nimport axios from 'axios';\n\nexport const getURI = async (tokenId) => {\n    var uri = await tokenURI(tokenId);\n    uri = uri.slice(7); \n    uri = uri.substring(0, uri.length - 14);\n    uri = 'https://' + uri + '.ipfs.dweb.link/metadata.json';\n    return uri\n}  \n\nexport const uriToImageConverter = (uri) => {\n    var image = uri.slice(7); \n    image = image.substring(0, image.length - 5);\n    image = 'https://' + image + '.ipfs.dweb.link/blob';\n    return image;\n}\n\nexport const getImageFromTokenId = async (tokenId) => {\n    const uri = await getURI(tokenId);\n    const result = await axios(uri);\n    const image = uriToImageConverter(result.data.image);\n    return image;\n}\n\nexport const getMetadataFromTokenId = async (tokenId) => {\n    const uri = await getURI(tokenId);\n    const result = await axios(uri);\n    return result.data;\n}\n\nexport const getLoveLetterImageFromTokenId = async (tokenId) => {\n    var cid = await tokenURILoveLetter(tokenId);\n    const image = 'https://' + cid + '.ipfs.dweb.link';\n    return image;\n}\n\nexport const getMarriageCertURI = async (tokenId) => {\n    var uri = await marriageCertificateTokenURI(tokenId);\n    uri = uri.slice(7); \n    uri = uri.substring(0, uri.length - 14);\n    uri = 'https://' + uri + '.ipfs.dweb.link/metadata.json';\n    return uri\n}  \n\nexport const getImageFromMarriageCertTokenId = async (tokenId) => {\n    const uri = await getMarriageCertURI(tokenId);\n    const result = await axios(uri);\n    const image = uriToImageConverter(result.data.image);\n    return image;\n}\n\nexport const getTreeImageFromTokenId = async (tokenId) => {\n    const cid = await tokenURITree(tokenId);\n    const image = getImageFromCID(cid);\n    return image;\n}\n\nexport const dataURItoBlob = (dataURI) => {\n    var byteString = atob(dataURI.split(',')[1]);\n    var ab = new ArrayBuffer(byteString.length);\n    var ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n    }\n    var bb = new Blob([ab], {type:'image/*'});\n    return bb;\n}\n\nexport const getGeneralContractURI = async (tokenUri) => {\n    var uri = tokenUri;\n    uri = uri.slice(7); \n    uri = uri.substring(0, uri.length - 14);\n    uri = 'https://' + uri + '.ipfs.dweb.link/metadata.json';\n    return uri\n  }  \n    \nexport const getMetadataFromGeneralContractTokenUri = async (tokenUri) => {\n    const uri = await getGeneralContractURI(tokenUri);\n    const result = await axios(uri);\n    return result.data;\n}\n  \nexport const getImageFromCID = (tokenUriCID) => {\n    return 'https://' + tokenUriCID + '.ipfs.dweb.link';\n}  ","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}