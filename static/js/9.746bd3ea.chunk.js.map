{"version":3,"sources":["app/Dating.js","app/services/utility.js","app/services/constants.js"],"names":["i","Dating","alchemyWeb3","createAlchemyWeb3","process","useState","usersList","setUsersList","fetchedUserAddr","setFetchedUserAddr","fetchedUser","setFetchedUser","isUserFetched","setIsUserFetched","userAllNFTs","setUserAllNFTs","getRandomInt","max","Math","floor","random","useEffect","fetchAllUsers","users","fetchUsers","changeUser","getUser","user","fetchNFTs","handleRandomUser","length","randomIdx","randomUserAddr","address","alchemy","getNfts","owner","alchemyNFTs","totalCount","alchemyNFTsList","ownedNfts","nftObject","metadata","image","getMetadataFromGeneralContractTokenUri","tokenUri","raw","uriToImageConverter","getImageFromCID","myNftObject","contract","id","tokenId","prev","style","color","Group","className","width","marginLeft","Control","as","size","placeholder","onChange","e","idx","target","value","backgroundColor","map","userAddr","index","variant","onClick","marginBottom","fontWeight","marginRight","name","GENDER","gender","overflow","whiteSpace","cursor","textOverflow","navigator","clipboard","writeText","wallet","alert","window","location","href","marginTop","xs","md","nft","minWidth","maxWidth","margin","borderRadius","borderColor","borderStyle","Img","src","Body","Title","parseInt","Text","description","getURI","tokenURI","uri","slice","substring","getImageFromTokenId","axios","result","data","getMetadataFromTokenId","getLoveLetterImageFromTokenId","tokenURILoveLetter","cid","getMarriageCertURI","marriageCertificateTokenURI","getImageFromMarriageCertTokenId","getTreeImageFromTokenId","tokenURITree","dataURItoBlob","dataURI","byteString","atob","split","ab","ArrayBuffer","ia","Uint8Array","charCodeAt","Blob","type","getGeneralContractURI","tokenUriCID","0","1","2"],"mappings":"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","file":"static/js/9.746bd3ea.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Row, Col, Card, Form, Button } from 'react-bootstrap';\nimport { fetchAllUsers, getUser } from \"./services/web3\";\nimport './dashboard/Dashboard.css'\nimport { GENDER } from './services/constants';\nimport { createAlchemyWeb3 } from \"@alch/alchemy-web3\";\nimport { getMetadataFromGeneralContractTokenUri, uriToImageConverter, getImageFromCID } from \"./services/utility\";\n\nexport function Dating () {\n\n  const alchemyWeb3 = createAlchemyWeb3(`https://polygon-mumbai.g.alchemy.com/v2/${process.env.REACT_APP_ALCHEMY_API_KEY}`);\n\n  const [usersList, setUsersList] = useState([]);\n  const [fetchedUserAddr, setFetchedUserAddr] = useState(\"\");\n  const [fetchedUser, setFetchedUser] = useState({});\n  const [isUserFetched, setIsUserFetched] = useState(false)\n  const [userAllNFTs, setUserAllNFTs] = useState([]);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const users = await fetchAllUsers();\n      setUsersList(users);\n    }\n\n    fetchUsers();\n  }, []);\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  const changeUser = async () => {\n    const user = await getUser(fetchedUserAddr);\n    setFetchedUser(user);\n    setIsUserFetched(true);\n    await fetchNFTs(fetchedUserAddr);\n  } \n\n  const handleChangeUserAddr = (idx) => {\n    setFetchedUserAddr(usersList[idx]);\n  }\n\n  const handleRandomUser = async () => {\n    const max = usersList.length;\n    const randomIdx = getRandomInt(max);\n    const randomUserAddr = usersList[randomIdx];\n    await fetchNFTs(randomUserAddr);\n    const user = await getUser(randomUserAddr);\n    setFetchedUserAddr(randomUserAddr);\n    setFetchedUser(user);\n    setIsUserFetched(true);\n  }\n\n  const fetchNFTs = async (address) => {\n    \n    const alchemyNFTs = await alchemyWeb3.alchemy.getNfts({\n      owner: address\n    });\n    \n    const length = alchemyNFTs.totalCount;\n    const alchemyNFTsList = alchemyNFTs.ownedNfts;\n    \n    setUserAllNFTs([]);\n    for(var i = 0; i < length; i++) {\n      const nftObject = alchemyNFTsList[i];\n      let metadata, image;\n      try{\n        metadata = await getMetadataFromGeneralContractTokenUri(nftObject.tokenUri.raw);\n        image = uriToImageConverter(metadata.image);\n      }\n      catch (e) {\n        try {\n          image = getImageFromCID(nftObject.tokenUri.raw);\n          metadata = {\n            \"name\": \"NFT\",\n            \"description\": \"This NFT has no description\",\n          }\n        }\n        catch (e) {\n          continue;\n        }\n      }\n      var myNftObject = {\n        \"contract\": nftObject.contract.address,\n        \"tokenId\": nftObject.id.tokenId,\n        \"tokenUri\": nftObject.tokenUri.raw,\n        \"metadata\": metadata,\n        \"image\": image\n      }\n      setUserAllNFTs((prev) => [...prev, myNftObject]);\n    }\n  };\n\n    return (\n      <div>\n          <h2 style={{color:\"#f2c96a\"}}>Start Dating Now!</h2>\n          <Form.Group className=\"d-flex\" style={{width:\"40vw\", marginLeft:\"calc(50% - 20vw)\"}}>\n            <Form.Control as=\"select\" size=\"lg\" placeholder=\"User Wallet Address\" \n            onChange={(e) => {handleChangeUserAddr(e.target.value)}} style={{backgroundColor:\"#191c24\", color:\"white\"}}>\n              <option value=\"Select a user\"> Select a user </option>\n              {usersList.map((userAddr, index) => <option value={index}>{userAddr}</option>)}\n            </Form.Control>\n            <Button variant=\"primary\" id=\"button-addon2\" onClick={changeUser}>\n                      Fetch User\n            </Button>\n          </Form.Group>\n          <div className=\"purchase__detailsBuy\">\n            <button style={{marginLeft:\"calc(50% - 106.4px)\", marginBottom:\"20px\"}} onClick={handleRandomUser}>\n                Fetch Random User\n            </button>\n          </div>\n          {isUserFetched && \n        <div className='row'>\n          <div className=\"col-12 grid-margin\">\n            <div className='card'>\n              <div className='card-body'>\n                <h2 style={{color:\"#f2c96a\"}}>User Details</h2>\n                <div className='d-flex' style={{fontWeight:\"400\"}}>\n                  <h4 style={{marginRight:\"1rem\"}}>Name: {fetchedUser.name}</h4> \n                  <h4 style={{marginRight:\"1rem\"}}>Gender: {GENDER[fetchedUser.gender]}</h4> \n                  <h4 style={{width:\"250px\", overflow:\"hidden\", whiteSpace:\"nowrap\", cursor:\"pointer\", textOverflow:\"ellipsis\"}} \n                  onClick={(e) => {navigator.clipboard.writeText(fetchedUser.wallet); alert(\"Copied wallet address to clipboard\")}}>\n                    Wallet Address: {fetchedUser.wallet}</h4>\n\n                </div>\n                <div className=\"purchase__detailsBuy mt-3\">\n                          <button onClick={() => {window.location.href=\"/ShaadiOnChain/#/love-letters\"}}>\n                              Send Love Letter\n                          </button>\n                </div>\n                <h4 className=\"card-title\" style={{marginTop:\"40px\"}}>Their NFTs</h4>\n                <Row xs={1} md={2} className=\"g-4\">\n                  {userAllNFTs.map((nft, idx) => (\n                    <Col style={{marginLeft:\"0vw\"}}>\n                      <Card style={{minWidth:\"20vw\",maxWidth:\"20vw\", margin:\"10px\", borderRadius:\"5%\", borderColor:\"gray\", borderStyle:\"dashed\"}}>\n                        <Card.Img variant=\"top\" src={nft.image} style={{width:\"90%\", marginLeft:\"5%\", marginTop:\"5%\", borderRadius:\"5%\"}}/>\n                        <Card.Body>\n                          <Card.Title>#{parseInt(nft.tokenId, 16)} {nft.metadata.name}</Card.Title>\n                          <Card.Text>\n                              {nft.metadata.description}\n                          </Card.Text>\n                        </Card.Body>\n                      </Card>\n                    </Col>\n                  ))}\n                </Row>\n\n              </div>\n            </div>\n          </div>\n        </div>\n}\n      </div> \n    );\n  }\n\nexport default Dating;","import { tokenURI, tokenURILoveLetter, marriageCertificateTokenURI, tokenURITree } from \"./web3\";\nimport axios from 'axios';\n\nexport const getURI = async (tokenId) => {\n    var uri = await tokenURI(tokenId);\n    uri = uri.slice(7); \n    uri = uri.substring(0, uri.length - 14);\n    uri = 'https://' + uri + '.ipfs.dweb.link/metadata.json';\n    return uri\n}  \n\nexport const uriToImageConverter = (uri) => {\n    var image = uri.slice(7); \n    image = image.substring(0, image.length - 5);\n    image = 'https://' + image + '.ipfs.dweb.link/blob';\n    return image;\n}\n\nexport const getImageFromTokenId = async (tokenId) => {\n    const uri = await getURI(tokenId);\n    const result = await axios(uri);\n    const image = uriToImageConverter(result.data.image);\n    return image;\n}\n\nexport const getMetadataFromTokenId = async (tokenId) => {\n    const uri = await getURI(tokenId);\n    const result = await axios(uri);\n    return result.data;\n}\n\nexport const getLoveLetterImageFromTokenId = async (tokenId) => {\n    var cid = await tokenURILoveLetter(tokenId);\n    const image = 'https://' + cid + '.ipfs.dweb.link';\n    return image;\n}\n\nexport const getMarriageCertURI = async (tokenId) => {\n    var uri = await marriageCertificateTokenURI(tokenId);\n    uri = uri.slice(7); \n    uri = uri.substring(0, uri.length - 14);\n    uri = 'https://' + uri + '.ipfs.dweb.link/metadata.json';\n    return uri\n}  \n\nexport const getImageFromMarriageCertTokenId = async (tokenId) => {\n    const uri = await getMarriageCertURI(tokenId);\n    const result = await axios(uri);\n    const image = uriToImageConverter(result.data.image);\n    return image;\n}\n\nexport const getTreeImageFromTokenId = async (tokenId) => {\n    const cid = await tokenURITree(tokenId);\n    const image = getImageFromCID(cid);\n    return image;\n}\n\nexport const dataURItoBlob = (dataURI) => {\n    var byteString = atob(dataURI.split(',')[1]);\n    var ab = new ArrayBuffer(byteString.length);\n    var ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n    }\n    var bb = new Blob([ab], {type:'image/*'});\n    return bb;\n}\n\nexport const getGeneralContractURI = async (tokenUri) => {\n    var uri = tokenUri;\n    uri = uri.slice(7); \n    uri = uri.substring(0, uri.length - 14);\n    uri = 'https://' + uri + '.ipfs.dweb.link/metadata.json';\n    return uri\n  }  \n    \nexport const getMetadataFromGeneralContractTokenUri = async (tokenUri) => {\n    const uri = await getGeneralContractURI(tokenUri);\n    const result = await axios(uri);\n    return result.data;\n}\n  \nexport const getImageFromCID = (tokenUriCID) => {\n    return 'https://' + tokenUriCID + '.ipfs.dweb.link';\n}  ","export const GENDER = {\n    0: \"Male\",\n    1: \"Female\",\n    2: \"Others\"\n}\n\nexport const PROPOSAL_STATUS = {\n    0: \"Pending\",\n    1: \"Accepted\",\n    2: \"Rejected\"\n}"],"sourceRoot":""}